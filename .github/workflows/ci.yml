name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  checks: write
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

  lint:
    name: Run linters
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  tag:
    name: Tag
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Read version from package.json
        id: version
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin ${{ steps.version.outputs.version }})
          if [ -z "$TAG_EXISTS" ]; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "exists=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create and push version tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

  automerge:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2

      - name: Enable auto-merge
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          merge-method: merge